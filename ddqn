{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU",
    "gpuClass": "standard"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Amitabh1989/Dueling-DQN/blob/main/ddqn\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import gym\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.optim as optim\n",
        "import torch.nn.functional as F\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# set up matplotlib\n",
        "is_ipython = 'inline' in matplotlib.get_backend()\n",
        "if is_ipython:\n",
        "    from IPython import display\n",
        "\n",
        "plt.ion()\n",
        "\n",
        "\n",
        "episode_durations = []\n",
        "\n",
        "\n",
        "def plot_durations(show_result=False):\n",
        "    plt.figure(1)\n",
        "    durations_t = torch.tensor(episode_durations, dtype=torch.float)\n",
        "    if show_result:\n",
        "        plt.title('Result')\n",
        "    else:\n",
        "        plt.clf()\n",
        "        plt.title('Training...')\n",
        "    plt.xlabel('Episode')\n",
        "    plt.ylabel('Duration')\n",
        "    plt.plot(durations_t.numpy())\n",
        "    # Take 100 episode averages and plot them too\n",
        "    if len(durations_t) >= 100:\n",
        "        means = durations_t.unfold(0, 100, 1).mean(1).view(-1)\n",
        "        means = torch.cat((torch.zeros(99), means))\n",
        "        plt.plot(means.numpy())\n",
        "\n",
        "    plt.pause(0.001)  # pause a bit so that plots are updated\n",
        "    if is_ipython:\n",
        "        if not show_result:\n",
        "            display.display(plt.gcf())\n",
        "            display.clear_output(wait=True)\n",
        "        else:\n",
        "            display.display(plt.gcf())"
      ],
      "metadata": {
        "id": "k4Y04aV8HyPM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import tensorflow as tf\n",
        "from tensorflow import keras \n",
        "from keras.optimizers import Adam\n",
        "import numpy as np\n",
        "\n",
        "\n",
        "class DuelingDeepQNetwork(keras.Model):\n",
        "    def __init__(self, n_actions, fc1_dims, fc2_dims):\n",
        "        super(DuelingDeepQNetwork, self).__init__()\n",
        "        self.dense1 = keras.layers.Dense(fc1_dims, activation='relu')\n",
        "        self.dense2 = keras.layers.Dense(fc2_dims, activation='relu')\n",
        "        # self.V = keras.layers.Dense(1, activation=None)\n",
        "        self.A = keras.layers.Dense(n_actions, activation=None)\n",
        "\n",
        "    def call(self, state):\n",
        "        x = self.dense1(state)\n",
        "        x = self.dense2(x)\n",
        "        # V = self.V(x)\n",
        "        A = self.A(x)\n",
        "        \n",
        "        # A_mean=tf.math.reduce_mean(A, axis=1, keepdims=True)\n",
        "       \n",
        "        # Q = (V + (A - A_mean))\n",
        "        \n",
        "        return A\n",
        "\n",
        "    # may be unnecessary, please experiment with call()\n",
        "    # def advantage(self, state):\n",
        "    #     x = self.dense1(state)\n",
        "    #     x = self.dense2(x)\n",
        "    #     A = self.A(x)\n",
        "\n",
        "    #     return A\n"
      ],
      "metadata": {
        "id": "PCx0TWzTHyYm",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "40667392-d517-4797-bcca-47d943f55c78"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.9/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n",
            "  and should_run_async(code)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class ReplayBuffer():\n",
        "    def __init__(self, max_size, input_shape):\n",
        "        self.mem_size = max_size\n",
        "        self.mem_cntr = 0\n",
        "\n",
        "        self.state_memory = np.zeros((self.mem_size, *input_shape),\n",
        "                                        dtype=np.float32)\n",
        "        self.new_state_memory = np.zeros((self.mem_size, *input_shape),\n",
        "                                        dtype=np.float32)\n",
        "        self.action_memory = np.zeros(self.mem_size, dtype=np.int32)\n",
        "        self.reward_memory = np.zeros(self.mem_size, dtype=np.float32)\n",
        "        self.terminal_memory = np.zeros(self.mem_size, dtype=np.bool)\n",
        "\n",
        "    def store_transition(self, state, action, reward, state_, done):\n",
        "        index = self.mem_cntr % self.mem_size\n",
        "        self.state_memory[index] = state\n",
        "        self.new_state_memory[index] = state_\n",
        "        self.action_memory[index] = action\n",
        "        self.reward_memory[index] = reward\n",
        "        self.terminal_memory[index] = done\n",
        "\n",
        "        self.mem_cntr += 1\n",
        "\n",
        "    def sample_buffer(self, batch_size):\n",
        "        max_mem = min(self.mem_cntr, self.mem_size)\n",
        "        batch = np.random.choice(max_mem, batch_size, replace=False)\n",
        "\n",
        "        states = self.state_memory[batch]\n",
        "        new_states = self.new_state_memory[batch]\n",
        "        actions = self.action_memory[batch]\n",
        "        rewards = self.reward_memory[batch]\n",
        "        dones = self.terminal_memory[batch]\n",
        "\n",
        "        return states, actions, rewards, new_states, dones"
      ],
      "metadata": {
        "id": "tVP2ePkrHybw",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "58efc8f1-d6de-4d7b-b991-db49e4409238"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.9/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n",
            "  and should_run_async(code)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class Agent():\n",
        "    def __init__(self, lr, gamma, n_actions, epsilon, batch_size,\n",
        "                 input_dims, epsilon_dec=1e-3, eps_end=0.01, \n",
        "                 mem_size=100000, fname='dueling_dqn.h5', fc1_dims=128,\n",
        "                 fc2_dims=128, replace=100):\n",
        "        self.action_space = [i for i in range(n_actions)]\n",
        "        self.gamma = gamma\n",
        "        self.epsilon = epsilon\n",
        "        self.eps_dec = epsilon_dec\n",
        "        self.eps_min = eps_end\n",
        "        self.fname = fname\n",
        "        self.replace = replace\n",
        "        self.batch_size = batch_size\n",
        "\n",
        "        self.learn_step_counter = 0\n",
        "        self.memory = ReplayBuffer(mem_size, input_dims)\n",
        "        self.q_eval = DuelingDeepQNetwork(n_actions, fc1_dims, fc2_dims)\n",
        "        self.q_next = DuelingDeepQNetwork(n_actions, fc1_dims, fc2_dims)\n",
        "        \n",
        "\n",
        "        self.q_eval.compile(optimizer=Adam(learning_rate=lr),\n",
        "                            loss='mean_squared_error')\n",
        "        # just a formality, won't optimize network\n",
        "        self.q_next.compile(optimizer=Adam(learning_rate=lr),\n",
        "                            loss='mean_squared_error')\n",
        "\n",
        "    def store_transition(self, state, action, reward, new_state, done):\n",
        "        self.memory.store_transition(state, action, reward, new_state, done)\n",
        "\n",
        "    def choose_action(self, observation):\n",
        "        if np.random.random() < self.epsilon:\n",
        "            action = np.random.choice(self.action_space)\n",
        "        else:\n",
        "            state = np.array([observation])\n",
        "            actions = self.q_eval(state)\n",
        "            action = tf.math.argmax(actions, axis=1).numpy()[0]\n",
        "\n",
        "        return action\n",
        "\n",
        "    def learn(self):\n",
        "        if self.memory.mem_cntr < self.batch_size:\n",
        "            return\n",
        "\n",
        "        if self.learn_step_counter % self.replace == 0:\n",
        "            self.q_next.set_weights(self.q_eval.get_weights())\n",
        "\n",
        "        states, actions, rewards, states_, dones = \\\n",
        "                                    self.memory.sample_buffer(self.batch_size)\n",
        "        \n",
        "        q_next = self.q_next(states_)\n",
        "        q_eval = self.q_eval(states_)\n",
        "        q_pred = self.q_eval(states)\n",
        "        \n",
        "        max_actions = np.argmax(q_eval, axis=1)\n",
        "        q_target = np.copy(q_pred)\n",
        "        \n",
        "\n",
        "        # improve on my solution!\n",
        "        for idx, terminal in enumerate(dones):\n",
        "            if terminal:\n",
        "                q_next = tf.Variable(q_next)\n",
        "                q_next[idx].assign(0.0)\n",
        "                \n",
        "            q_target[idx, actions[idx]] = rewards[idx] + self.gamma*q_next[idx,max_actions[idx].astype(int)]\n",
        "        \n",
        "        self.q_eval.train_on_batch(states, q_target)\n",
        "\n",
        "        self.epsilon = self.epsilon - self.eps_dec if self.epsilon > \\\n",
        "                        self.eps_min else self.eps_min\n",
        "\n",
        "        self.learn_step_counter += 1\n",
        "\n",
        "    def save_model(self):\n",
        "        self.q_eval.save('deuling_dqn_model_keras.h5')\n",
        "\n",
        "    def load_model(self):\n",
        "        self.q_eval = load_model(self.model_file)"
      ],
      "metadata": {
        "id": "awFJJ1jXHyhn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import gym\n",
        "from itertools import count\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    #env = gym.make('LunarLander-v2')\n",
        "    env = gym.make('CartPole-v1')\n",
        "    n_games = 400\n",
        "    agent = Agent(gamma=0.99, epsilon=1, lr=1e-3, input_dims=[4], \n",
        "                  epsilon_dec=1e-3, mem_size=100000, batch_size=256, eps_end=0.01,\n",
        "                  fc1_dims=128, fc2_dims=128, replace=100, n_actions=2)\n",
        "\n",
        "    scores, eps_history = [], []\n",
        "    \n",
        "    for i in range(n_games):\n",
        "        done = False\n",
        "        score = 0\n",
        "        observation = env.reset()\n",
        "        t=0\n",
        "        while not done:\n",
        "            action = agent.choose_action(observation)\n",
        "            observation_, reward, done, info = env.step(action)\n",
        "            score += reward\n",
        "            \n",
        "            agent.store_transition(observation, action, reward, observation_, done)\n",
        "            \n",
        "            \n",
        "               \n",
        "            observation = observation_\n",
        "            agent.learn()\n",
        "            t+=1\n",
        "        # eps_history.append(agent.epsilon)\n",
        "        # scores.append(score)\n",
        "\n",
        "        # avg_score = np.mean(scores[-100:])\n",
        "        # print('episode ', i, 'score %.1f' % score,\n",
        "        #         'average score %.1f' % avg_score,\n",
        "        #         'epsilon %.2f' % agent.epsilon)\n",
        "    \n",
        "\n",
        "            if done:\n",
        "                episode_durations.append(t + 1)\n",
        "                plot_durations()\n",
        "                \n",
        "                break\n",
        "\n",
        "print('Complete')\n",
        "plot_durations(show_result=True)\n",
        "plt.ioff()\n",
        "plt.show()\n",
        "    # filename='Dueling_DQN_Keras_On_cartPole.png'\n",
        "    # x = [i+1 for i in range(n_games)]\n",
        "    # #plotLearning(x, scores, eps_history, filename)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 490
        },
        "id": "qb7G6zCoHykZ",
        "outputId": "b412ab88-5f72-439b-94b5-837e7ba903c6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 0 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Nrl9TIIMHynm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "wLMTiyYAHyqU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "E5-n78nzHytA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "aYm4E6cfHyvs"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "EmlikyeRHyyp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Vo-w90X2Hy1z"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Z4IQN_FCHy5H"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "t0hQsfydHy9m"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}